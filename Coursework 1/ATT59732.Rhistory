simtab <- table(c(rep("Apples",53),rep("Bananas",12),rep("Cherries",102),rep("Dates",88)))
barplot(simtab)
simtabp <- simtab/(53+12+102+88)
barplot(simtabp)
simtab <- table(c(rep("Football",20),rep("Tennis",36),rep("Basketball",12)))
barplot(simtab)
sports <- table(c(rep("Football",20),rep("Tennis",36),rep("Basketball",12)))
barplot(sports)
sports <- sports/(20+36+12)
barplot(sports)
xbin <- rbinom(10000,10,0.1)
tabbin <-table(xbin)
tabbinp <- tabbin/10000
barplot(tabbin)
barplot(tabbinp)
diceTwo <- rbinom(15000,15,0.2)
diceTable <- table(diceTwo)
barplot(diceTable)
diceTwo <- rbinom(15000,15,0.1)
diceTable <- table(diceTwo)
barplot(diceTable)
barplot(diceTable/15000)
xpois <- rpois(10000,4)
tabpois <- table(xpois)
tabpoisp <- tabpois/10000
barplot(tabpois)
barplot(tabpoisp)
xunif <- ceiling(runif(10000,0,6))
tabunif <- table(xunif)
tabunifp <- tabunif/10000
barplot(tabunif)
barplot(tabunifp)
xmiss <- c(rep(1,1000),rep(2,1),rep(3,1000),rep(4,1000),rep(5,1000),rep(6,1000))
tabxmiss <- table(xmiss)
tabxmissp <- tabxmiss/5001
barplot(tabxmiss)
barplot(tabxmissp)
tabpois2 <- tabpois
tabpois2[11] <- 2000
barplot(tabpois2)
tabpois2[15] <- 2000
barplot(tabpois2)
xnorm <- rnorm(10000,150,25)
hist(xnorm)
hist(xnorm,breaks=100)
hist(xnorm,breaks=1000)
question3 <- rnorm(5000,150,25)
hist(question3, breaks=50)
height <- seq(50,250,length=200)
probden <- dnorm(height,150,25)
plot(height,probden,type="l")
boxplot(xnorm)
xf1 <- rf(10000,5,2)
xf2 <- rf(10,5,2)
hist(xf1,xlim=c(0,7),breaks=30000)
boxplot(xf2)
len <- seq(0,5,length=100)
probdenf <- df(len,5,2)
plot(len,probdenf,type="l")
contable <- matrix(c(12,8,16,4,3,5,6,9,12),ncol=3,byrow=TRUE)
colnames(contable) <- c("Golf","Football","Swimming")
rownames(contable) <- c("Apples","Pears","Carrots")
contable <- as.table(contable)
barplot(contable,legend.text=TRUE)
barplot(contable,beside=TRUE,legend.text=TRUE)
contablet <- t(contable)
barplot(contablet,beside=TRUE,legend.text=TRUE)
barplot(contablet,legend.text=TRUE)
question4 <- matrix(c(65,23,105,15,35,94),ncol=3,byrow=TRUE)
colnames(question4) <- c("North,"East","West","")
colnames(question4) <- c("North,"East","West")
colnames(question4) <- c("North","East","West")
rownames(question4) <- c("Black","White")
question4 <- as.table(question4)
barplot(question4,legend.text=TRUE)
barplot(question4,beside=TRUE,legend.text=TRUE)
question4t < t(question4)
question4t <- t(question4)
barplot(question4t,legend.text=TRUE)
barplot(question4t,beside=TRUE,legend.text=TRUE)
lothians <- data.frame(East=rnorm(1000,185,12),Mid=rnorm(1000,160,13),West=rnorm(1000,140,10))
boxplot(lothians,ylab="Height (cm)")
heightE <- seq(50,250,length=200)
probdenE <- dnorm(height,185,12)
probdenM <- dnorm(height,160,13)
probdenW <- dnorm(height,140,10)
plot(heightE,probdenW,type="l",col="blue",xlab="Height",ylab="Density")
lines(heightE,probdenM,col="red")
lines(heightE,probdenE,col="green")
xs <- seq(-4,4,length=200)
jitter1 <- rnorm(200,0,0.5)
jitter2 <- rnorm(200,0,0.25)
ys1 <- xs + jitter1
plot(xs,ys1)
abline(lm(ys1~xs),col="red")
ys2 <- xs^2/2 + jitter1
plot(xs,ys2)
abline(lm(ys2~xs),col="red")
lines(lowess(xs,ys2),col="blue")
ys3 <- jitter1 - xs
plot(xs,ys3)
abline(lm(ys3~xs), col="red")
ys4 <- sin(xs) + jitter2
plot(xs,ys4)
abline(lm(ys4~xs), col="red")
lines(lowess(xs,ys4),col="blue")
jitter3 <- c(rnorm(20,0,0.5),6,rnorm(179,0,0.5))
ys5 <- xs + jitter3
plot(xs,ys5)
abline(lm(ys5~xs),col = "red")
libray(fmsb)
library(fmsb)
library(fmsb)
library(ggplot2)
library(lattice)
library(MASS)
library(ggplot2)
library(fmsb)
aam <- data.frame(Location=factor(0,label="A"),Time=factor(0,label="AM"),Weight=rnorm(100,50,5))
apm <- data.frame(Location=factor(0,label="A"),Time=factor(1,label="PM"),Weight=rnorm(100,58,2))
bam <- data.frame(Location=factor(1,label="B"),Time=factor(0,label="AM"),Weight=rnorm(100,60,3))
bpm <- data.frame(Location=factor(1,label="B"),Time=factor(1,label="PM"),Weight=rnorm(100,64,5))
cam <- data.frame(Location=factor(2,label="C"),Time=factor(0,label="AM"),Weight=rnorm(100,40,7))
cpm <- data.frame(Location=factor(2,label="C"),Time=factor(1,label="PM"),Weight=rnorm(100,42,5))
oysters <- rbind(aam,apm,bam,bpm,cam,cpm)
ggplot(data=oysters,aes(y=Weight,x=Location,fill=Time)) + geom_boxplot()
library(ggplot)
install.packages("ggplot2")
ggplot(data=oysters,aes(y=Weight,x=Location,fill=Time)) + geom_boxplot()
>
sad
ggplot(data=oysters,aes(y=Weight,x=Location,fill=Time)) + geom_boxplot()
ggplot(data=oysters,aes(y=Weight,x=Location,fill=Time)) + geom_boxplot()
library(ggplot2)
ggplot(data=oysters,aes(y=Weight,x=Location,fill=Time)) + geom_boxplot()
ggplot(data=oysters,aes(y=Weight,x=Time,fill=Location)) + geom_boxplot()
ggplot(data=oysters,aes(y=Weight,x=Time,fill=Location)) + geom_boxplot() + facet_wrap(~Time,scales="free")
flattie <- data.frame(Breed=factor(0,label="Flat coat"),Length=rnorm(100,100,10),Weight=rnorm(100,30,3))
brittany <- data.frame(Breed=factor(1,label="Brittany"),Length=rnorm(100,60,10),Weight=rnorm(100,18,2))
springer <- data.frame(Breed=factor(2,label="Springer"),Length=rnorm(100,75,10),Weight=rnorm(100,25,3))
dogs <- rbind(flattie,brittany,springer)
ggplot(dogs,aes(x=Length,y=Weight,colour=Breed))+geom_point()
ggplot(dogs,aes(x=Length,y=Weight))+geom_point() + facet_grid(~Breed)
flattieM <- data.frame(Breed=factor(0,label="Flat coat"),Gender=factor(0,label="Male"),Length=rnorm(100,100,10),Weight=rnorm(100,30,3))
brittanyM <- data.frame(Breed=factor(1,label="Brittany"),Gender=factor(0,label="Male"),Length=rnorm(100,60,10),Weight=rnorm(100,18,2))
springerM <- data.frame(Breed=factor(2,label="Springer"),Gender=factor(0,label="Male"),Length=rnorm(100,75,10),Weight=rnorm(100,25,3))
flattieF <- data.frame(Breed=factor(0,label="Flat coat"),Gender=factor(1,label="Female"),Length=rnorm(100,90,10),Weight=rnorm(100,28,3))
brittanyF <- data.frame(Breed=factor(1,label="Brittany"),Gender=factor(1,label="Female"),Length=rnorm(100,55,10),Weight=rnorm(100,15,2))
springerF <- data.frame(Breed=factor(2,label="Springer"),Gender=factor(1,label="Female"),Length=rnorm(100,70,10),Weight=rnorm(100,23,4))
dogsG <- rbind(flattieM,flattieF,brittanyM,brittanyF,springerM,springerF)
ggplot(dogsG,aes(x=Length,y=Weight,colour=Breed,shape=Gender))+geom_point()
# ggplot(dogsG,aes(x=Length,y=Weight,colour=Gender,shape=Breed))+geom_point()
ggplot(dogsG,aes(x=Length,y=Weight,colour=Gender,shape=Breed))+geom_point()
ggplot(dogsG,aes(x=Length,y=Weight,colour=Breed)) + geom_point() + facet_grid(~Gender)
ggplot(dogsG,aes(x=Length,y=Weight)) + geom_point() + facet_grid(~Gender*Breed)
heightM <- rnorm(100,160,20)
jitterM <- rnorm(100,0,15)
weightM <- heightM/2+jitterM
medical <- data.frame(Height=heightM,Weight=weightM,Risk=heightM/weightM,RestHR=rnorm(100,85,15),LE=rnorm(100,80,10))
parcoord(medical,var.label=TRUE,col=1+(0:100)%/%25)
radarchart(medical,maxmin=FALSE,plty=1)
radarchart(medical[1:5,],maxmin=FALSE,plty=1)
install.packages("fmsb")
library(fmsb)
radarchart(medical,maxmin=FALSE,plty=1)
radarchart(medical[1:5,],maxmin=FALSE,plty=1)
par(mar=c(1,2,2,1))
layout(matrix(1:16,ncol=4))
lapply(1:16, function(i){
radarchart(rbind(c(min(medical[,1]),min(medical[,2]),min(medical[,3]),min(medical[,4]),min(medical[,5])),medical[i,],c(max(medical[,1]),max(medical[,2]),max(medical[,3]),max(medical[,4]),max(medical[,5]))),maxmin=FALSE,cglty=3,plty=1)})
splom(medical)
raw.data <- read.csv("KelpHoldfastData.csv")
raw.data$Week <- as.factor(raw.data$Week)
splom(raw.data)
splom(raw.data$Week)
parcoord(raw.data,var.label=TRUE,col=1+(0:100)%/%25
)
parcoord(raw.data,var.label=TRUE,col=1+(0:100)%/%25)
radarchart(raw.data,maxmin=FALSE,plty=1)
splom(raw.data)
setwd("~/My Profile/Desktop/Coursework_DataAnalytics")
data = read.csv(file="example.csv")
View(data)
data
data1 = data[,1]
data1
data[2,]
data[4,3]
data[1:6,]
data[,2:3]
data[1:6,2:3]
data[-5,]
data[-10,-3]
data[-(4:8),]
data[data$Type=="W"]
data[data$Type=="W",]
data[data$Type=="W"|data$Type=="D",]
data[data$num1>40,]
data[data$num1<50 & data$num2 > 60,]
data[data$Type != "S",]
data15 = data[data$num2 > 60]
data15 = data[data$num2 > 60,]
data16 = data15[data15$num1 < 50,]
data16
rm(list=ls())
# data16 and data13 are identical
rm(list=ls())
atheletesData = dataset.csv
atheletesData = read.csv(file="dataset.csv")
View(atheletesData)
install.packages("ggplot2")
View(atheletesData)
malesAtheletes = atheletesData[atheletesData$Gender != F,]
malesAtheletes = atheletesData[atheletesData$Gender != "F",]
malesAtheletes = atheletesData[atheletesData$Gender != "M",]
malesAtheletes = atheletesData[atheletesData$Gender != "F",]
femalesAtheletes = atheletesData[atheletesData$Gender != "F",]
View(femalesAtheletes)
View(malesAtheletes)
View(femalesAtheletes)
femalesAtheletes = atheletesData[atheletesData$Gender != "M",]
View(femalesAtheletes)
genderLocationData = atheletesData[,2:3]
View(genderLocationData)
View(genderLocationData)
library(ggplot2)
library(reshape2)
?melt
demo(melt)
help(melt)
View(femalesAtheletes)
trialsData = atheletesData[,5:9]
View(trialsData)
splom(trialsData)
library(fmsb)
library(lattice)
library(MASS)
splom(trialsData)
splom(atheletesData)
atheletesData = atheletesData[,-1]
splom(atheletesData)
View(femalesAtheletes)
remove(trialsData)
genderTrialsData(atheletesData[,1 & 4:8])
genderTrialsData(atheletesData[,-(2:3)])
genderTrialsData = atheletesData[,-(2:3)]
View(genderTrialsData)
splom(genderTrialsData)
genderSprint = genderTrialsData[,-(3:6)]
View(genderSprint)
genderSprintPlot = ggplot(genderSprint, aes(Gender, ss))
View(genderSprintPlot)
genderSprintPlot + geom_boxplot(varwidth = T, fill="plum")
View(genderSprint)
View(genderSprint)
genderSprintPlot = genderSprintPlot + geom_boxplot(varwidth = T, fill="plum")
View(atheletesData)
View(genderLocationData)
remove(genderLocationData)
remove(femalesAtheletes)
remove(malesAtheletes)
View(genderTrialsData)
genderJump = genderTrialsData[,1 & 3]
View(genderJump)
genderJump = genderJump[,-2]
genderJump = genderJump[,-(3:5)]
genderJumpPlot = ggplot(genderJump,aes(Gender,sj)) + geom_boxplot(varwidth = T, fill="plum")
print(genderJump)
print(genderJumpPlot)
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
genderSprintJumptPlot = grid.arrange(genderSprintPlot,genderJumpPlot,nCOl = 2)
grid.arrange(genderSprintPlot,genderJumpPlot,nCOl = 2)
grid.arrange(genderSprintPlot,genderJumpPlot)
grid.arrange(genderSprintPlot,genderJumpPlot)
View(genderSprint)
View(genderTrialsData)
